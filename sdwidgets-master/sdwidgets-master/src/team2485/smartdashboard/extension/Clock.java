/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package team2485.smartdashboard.extension;

import edu.wpi.first.smartdashboard.gui.StaticWidget;
//import edu.wpi.first.smartdashboard.gui.Widget;
import edu.wpi.first.smartdashboard.properties.Property;
import edu.wpi.first.smartdashboard.types.DataType;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.swing.BorderFactory;
//import javax.swing.JLabel;
//import javax.swing.JPanel;
//import javax.swing.SwingUtilities;


/**
 *
 * @author student
 */
public class Clock extends StaticWidget {
    public static final String NAME = "Clock";
    public static final DataType[] TYPES = { DataType.NUMBER, DataType.STRING };
    public static final Color WarYellow = new Color(255, 240, 1);
    public static final Color WarYellowAlpha = new Color(255, 240, 1,200);
    public static final Color Gray = new Color(55, 50, 50);
    
    public long off = System.nanoTime();
    public int ms;
    public int s;
    public int m;
    public int [] t = new int [3];
    public boolean x;
    public int temp;

    @Override
    public String toString() {
        return super.toString(); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void transferFocus() {
        super.transferFocus(); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    
    
    

    /**
     * Creates new form Basic2
     */
    @Override
    public void init() {
        initComponents();
        new Thread(new Runnable() {

            @Override
            public void run() {
                while (true){
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Clock.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("oops");
                    }
                    
                      if (x)
                      t[0] = (Clock(100000000,off))%10;
                      
                      if(t[1]==60){
                          t[2]++;
                          t[1]=0;
                      }
                      if(t[1]==0){
                          SBar.setForeground(Gray);
                      }else{
                          SBar.setForeground(WarYellowAlpha);
                      }
                      MSBar.setString("" + (int)t[0]);
                      SBar.setString("" + (int)t[1]);
                      MBar.setString  ("" + (int)t[2]);
                      MSBar.setValue(10-(t[0]));
                      SBar.setValue(6000- (t[1]*100 + t[0]*10));
                      if(t[0]==9){
                          t[1]++;
                      }
                      if(t[0]==0){
                          MSBar.setForeground(Gray);
                      }else{
                          MSBar.setForeground(WarYellowAlpha);
                      }
                      if((t[2]%10)==0){
                          MBar.setForeground(Gray);
                      }else{
                          MBar.setForeground(WarYellowAlpha);
                      
                      
                } 
                      if ((((t[0] - temp) != 1)||((t[0] - temp) != 9))&(x)){
                          System.out.println("oops2");
                      }
                      
                      temp = t[0];
                      
                      
                      

                      
                }
            }
        }).start();
    }

    @Override
    public void propertyChanged(Property prprt) {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MSBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        SBar = new javax.swing.JProgressBar();
        MBar = new javax.swing.JProgressBar();
        Pause = new javax.swing.JProgressBar();
        Reset = new javax.swing.JProgressBar();

        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        MSBar.setBackground(new java.awt.Color(51, 51, 51));
        MSBar.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        MSBar.setForeground(new java.awt.Color(204, 204, 0));
        MSBar.setStringPainted(true);
        MSBar.setForeground(Clock.WarYellowAlpha);
        MSBar.setMaximum(10);
        MSBar.setToolTipText("");
        MSBar.setValue(5);
        MSBar.setFocusable(false);
        MSBar.setString(" ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setForeground(WarYellow);
        jLabel1.setText("W.A.R Watch");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        SBar.setBackground(new java.awt.Color(51, 51, 51));
        SBar.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        SBar.setForeground(new java.awt.Color(204, 204, 0));
        SBar.setStringPainted(true);
        SBar.setForeground(Clock.WarYellowAlpha);
        SBar.setMaximum(6000);
        SBar.setFocusable(false);
        SBar.setString(" ");

        MBar.setBackground(new java.awt.Color(51, 51, 51));
        MBar.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        MBar.setForeground(WarYellowAlpha);
        MBar.setMaximum(60);
        MBar.setValue(60);
        MBar.setFocusable(false);
        MBar.setString(" ");
        MBar.setStringPainted(true);

        MBar.setForeground(Clock.WarYellowAlpha);

        Pause.setBackground(WarYellowAlpha);
        Pause.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        Pause.setForeground(WarYellowAlpha);
        Pause.setMaximum(60);
        Pause.setToolTipText("");
        Pause.setValue(60);
        Pause.setFocusable(false);
        Pause.setString("Start");
        Pause.setStringPainted(true);
        Pause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PauseMouseClicked(evt);
            }
        });

        Reset.setBackground(new java.awt.Color(51, 51, 51));
        Reset.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        Reset.setForeground(new java.awt.Color(51, 51, 51));
        Reset.setMaximum(60);
        Reset.setValue(60);
        Reset.setFocusable(false);
        Reset.setString("Reset");
        Reset.setStringPainted(true);
        Reset.setStringPainted(true);

        Reset.setForeground(new java.awt.Color(50,50,50));
        Reset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResetMouseClicked(evt);
            }
        });
        Reset.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ResetKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(MBar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Reset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(Pause, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(SBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MSBar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jLabel1)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Reset, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SBar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MSBar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MBar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Pause, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(238, 238, 238))
        );
    }// </editor-fold>//GEN-END:initComponents
   private int Clock(int divider,long offset){
        long a = System.nanoTime();
        a = a -offset;
        int b;
        a /= divider;
        b = (int)a;
        return b;
       
    }
    private long ResetClock(){
        off = System.nanoTime();
        return off;
       
    }
    
                
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here
          x = !x;
        if (x){
            Pause.setString("Stop");
            Pause.setBackground(new java.awt.Color(50,50,50));
        }else{
            Pause.setString("Start");
            Pause.setBackground(WarYellow);
            Pause.setBorder(null);
        }
    }//GEN-LAST:event_formKeyPressed

    private void PauseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PauseMouseClicked
        // TODO add your handling code here:
        x = !x;
        if (x){
            Pause.setString("Stop");
            Pause.setForeground(new java.awt.Color(50,50,50));
        }else{
            Pause.setString("Start");
            Pause.setForeground(WarYellow);
            Pause.setBorder(null);
        }
    }//GEN-LAST:event_PauseMouseClicked

    private void ResetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ResetKeyPressed
        // TODO add your handling code here:
        off = ResetClock();
        t[2] = 0;
        t[1] = 0;
        t[0] = 0;
    }//GEN-LAST:event_ResetKeyPressed

    private void ResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResetMouseClicked
        // TODO add your handling code here:
        off = ResetClock();
        t[2] = 0;
        t[1] = 0;
        t[0] = 0;
    }//GEN-LAST:event_ResetMouseClicked

    
   // private int MilliSec(){
        
    //}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar MBar;
    private javax.swing.JProgressBar MSBar;
    private javax.swing.JProgressBar Pause;
    private javax.swing.JProgressBar Reset;
    private javax.swing.JProgressBar SBar;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
